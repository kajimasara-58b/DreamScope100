<!DOCTYPE html>
<html>
<style>
  .button {
    transition: background-color 0.3s, color 0.3s; /* スムーズなトランジション */
  }

  .button:hover {
    background-color: #f0f0f0; /* ホバー時の背景色 */
    color: #333; /* ホバー時の文字色 */
  }

  .button:active {
    background-color: #e0e0e0; /* クリック時の背景色 */
    color: #111; /* クリック時の文字色 */
  }
  .goalChart {
    max-width: 100%;
    height: auto;
  }
</style>

  <body class="bg-[#FFF5E8] flex flex-col h-screen overflow-auto">
    <!-- ヘッダー -->
    <%= render "shared/header" %>
    
    <p style="color: green"><%= notice %></p>

    <!-- メインコンテンツ -->
    <main class="flex-grow p-4 flex flex-col md:flex-row">
      <h2 class="text-3xl mb-4">ダッシュボード</h2>

      <!-- 円グラフ -->
      <div id="goal-chart-container" class="flex-1 md:w-1/2 md:pr-3 flex justify-center items-center md:mt-8">
        <canvas id="goalChart" class="max-w-[500px] max-h-[500px] md:w-[400px] md:h-[400px] goalChart"></canvas>

      </div>

      <!-- ボタン -->
      <div class="flex-1 md:w-1/2 p-5 flex flex-col justify-center items-center md:items-start">
        <div class="flex flex-col space-y-4">
          <a href="goals" class="bg-white text-black text-xl flex items-center px-4 py-2 rounded shadow button w-50">
            <i class="fas fa-tasks mr-2"></i>目標一覧
          </a>
          <a href="users/show" class="bg-white text-black text-xl flex items-center px-4 py-2 rounded shadow button w-50">
            <i class="fas fa-user mr-2"></i>ユーザー情報
          </a>
        </div>
      </div>
    </main>

    <!-- フッター -->
    <%= render "shared/footer" %>
  </body>

  <!-- Font AwesomeのCDNを読み込む -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

  <!-- Chart.jsのCDNを読み込む -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener('turbo:load', function() {
      console.log('Turbo Load triggered');
      // 親コンテナをIDで検索
      let container = document.querySelector('#goal-chart-container');
      if (!container) {
        console.error('Canvas container not found, attempting to recreate');
        // 親コンテナが存在しない場合、動的に作成
        const main = document.querySelector('main.flex-grow.p-4.flex.flex-col.md\\:flex-row');
        if (main) {
          container = document.createElement('div');
          container.id = 'goal-chart-container';
          container.className = 'flex-1 md:w-1/2 md:pr-3 flex justify-center items-center md:mt-8';
          const canvas = document.createElement('canvas');
          canvas.id = 'goalChart';
          canvas.className = 'w-[300px] h-[300px] md:w-[400px] md:h-[400px] goalChart';
          container.appendChild(canvas);
          main.insertBefore(container, main.children[1]); // mainの2番目の子要素の前に挿入
        } else {
          console.error('Main container not found.');
          return;
        }
      }

      let canvas = document.getElementById('goalChart');
      if (!canvas) {
        console.log('Canvas not found, creating new canvas');
        // <canvas>が存在しない場合、新しく追加
        canvas = document.createElement('canvas');
        canvas.id = 'goalChart';
        canvas.className = 'w-[300px] h-[300px] md:w-[400px] md:h-[400px] goalChart';
        container.appendChild(canvas);
      }

      console.log('Canvas element:', canvas);
      if (!canvas) {
        console.error('Canvas element "#goalChart" not found after creation.');
        return;
      }

      // データを非同期で取得する関数
      async function fetchDashboardData() {
        try {
          const response = await fetch('/dashboard/data', {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          console.log('Fetched Data:', data);
          return {
            achievedGoals: data.achieved_goals || 0,
            unachievedGoals: data.unachieved_goals || 0,
            registeredGoals: data.registered_goals || 0
          };
        } 
        catch (error) {
          console.error('Failed to fetch dashboard data:', error);
          return {
            achievedGoals: 0,
            unachievedGoals: 0,
            registeredGoals: 0
          };
        }
      }
  
      // チャートを初期化または更新する関数
      let goalChart;
      async function initializeOrUpdateChart() {
        const data = await fetchDashboardData();
        const { achievedGoals, unachievedGoals, registeredGoals } = data;
        const totalGoals = 100;
        const unregisteredGoals = totalGoals - registeredGoals;
  
        console.log('Chart Data:', { achievedGoals, unachievedGoals, unregisteredGoals });
  
        try {
          const ctx = canvas.getContext('2d');
          const goalChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
              labels: ['達成', '未達成', '未登録'],
              datasets: [{
                label: '目標達成状況',
                data: [achievedGoals, unachievedGoals, unregisteredGoals],
                backgroundColor: ['#FFA500', '#A9A9A9', '#E3E3E3'],
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              aspectRatio: 1,
              plugins: {
                tooltip: {
                  enabled: false
                }
              },
              layout: {
                padding: 10
              },
              scales: {
                x: {
                  display: false
                },
                y: {
                  display: false
                }
              },
              elements: {
                arc: {
                  borderWidth: 1
                }
              }
            },
            plugins: [{
              beforeDraw: function(chart) {
                const ctx = chart.ctx;
                const x = chart.width / 2;
                const y = chart.height / 2;

                // Canvasをクリア（一度だけ）
                ctx.clearRect(0, 0, chart.width, chart.height);

                // フォントサイズを計算する関数
                function calculateFontSize(radius, divisor) {
                  const safeRadius = radius || 50;
                  const fontSize = (safeRadius / divisor).toFixed(2) + "px Arial";
                  console.log('Font Size:', fontSize, 'Radius:', safeRadius, 'Divisor:', divisor);
                  return fontSize;
                }

                // 達成した目標数（大きく表示）
                ctx.font = calculateFontSize(chart.innerRadius, 1.5);
                ctx.textBaseline = "middle";
                ctx.fillStyle = "#000";
                ctx.fillText(achievedGoals, x - 40, y + 10);

                // '/100'（小さく表示）
                ctx.font = calculateFontSize(chart.innerRadius, 3.0);
                ctx.fillText('/' + totalGoals, x + 15, y + 30);

                ctx.save();
              }
            }]
          });
        } catch (error) {
          console.error('Failed to initialize chart:', error);
        }
      }

      // 初期化を実行
      initializeOrUpdateChart();
    });
  </script>


</html>
