<!DOCTYPE html>
<html>
<style>
  .button {
    transition: background-color 0.3s, color 0.3s; /* スムーズなトランジション */
  }

  .button:hover {
    background-color: #f0f0f0; /* ホバー時の背景色 */
    color: #333; /* ホバー時の文字色 */
  }

  .button:active {
    background-color: #e0e0e0; /* クリック時の背景色 */
    color: #111; /* クリック時の文字色 */
  }
  .goalChart {
    max-width: 100%;
    height: auto;
  }
</style>

  <body class="bg-[#FFF5E8] flex flex-col h-screen overflow-auto">
    <!-- ヘッダー -->
    <%= render "shared/header" %>
    
    <p style="color: green"><%= notice %></p>

    <!-- メインコンテンツ -->
    <main class="flex-grow p-4 flex flex-col md:flex-row">
      <h2 class="text-3xl mb-4">ダッシュボード</h2>

      <!-- 円グラフ -->
      <div class="flex-1 md:w-1/2 md:pr-3 flex justify-center items-center md:mt-8">
        <canvas id="goalChart" class="w-[300px] h-[300px] md:w-[400px] md:h-[400px]"></canvas>
      </div>

      <!-- ボタン -->
      <div class="flex-1 md:w-1/2 p-5 flex flex-col justify-center items-center md:items-start">
        <div class="flex flex-col space-y-4">
          <a href="goals" class="bg-white text-black text-xl flex items-center px-4 py-2 rounded shadow button w-50">
            <i class="fas fa-tasks mr-2"></i>目標一覧
          </a>
          <a href="users/show" class="bg-white text-black text-xl flex items-center px-4 py-2 rounded shadow button w-50">
            <i class="fas fa-user mr-2"></i>ユーザー情報
          </a>
        </div>
      </div>
    </main>

    <!-- フッター -->
    <%= render "shared/footer" %>
  </body>

  <!-- Font AwesomeのCDNを読み込む -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

  <!-- Chart.jsのCDNを読み込む -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener('turbo:load', function() {
      // 達成した目標数と全目標数（デフォルト値0を設定）
      const achievedGoals = <%= @achieved_goals.nil? ? 0 : @achieved_goals %>; // デフォルト0
      const unachievedGoals = <%= @unachieved_goals.nil? ? 0 : @unachieved_goals %>; // デフォルト0
      const totalGoals = 100; // 登録可能数
      const registeredGoals = <%= @registered_goals.nil? ? 0 : @registered_goals %>; // デフォルト0
      const unregisteredGoals = 100 - registeredGoals; // 未登録数

      // <canvas>要素が存在するか確認
      const canvas = document.getElementById('goalChart');
      if (!canvas) {
        console.error('Canvas element "#goalChart" not found.');
        return;
      }

      try {
        const ctx = canvas.getContext('2d');
        const goalChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ['達成', '未達成', '未登録'],
            datasets: [{
              label: '目標達成状況',
              data: [achievedGoals, unachievedGoals, unregisteredGoals],
              backgroundColor: ['#FFA500', '#A9A9A9', '#E3E3E3'],
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            aspectRatio: 1, // 円グラフの縦横比を1:1（正円）に固定
            plugins: {
              tooltip: {
                enabled: false // ツールチップを無効にする
              }
            }
          },
          plugins: [{
            beforeDraw: function(chart) {
              const ctx = chart.ctx;
              const x = chart.width / 2;
              const y = chart.height / 2;
  
              // Canvasをクリア（一度だけ）
              ctx.clearRect(0, 0, chart.width, chart.height);
  
              // フォントサイズを計算する関数
              function calculateFontSize(radius, divisor) {
                return (radius / divisor).toFixed(2) + "px Arial";
              }
  
              // 達成した目標数（大きく表示）
              ctx.font = calculateFontSize(chart.innerRadius, 1.2); // より大きなフォントサイズ（例: 1.2で調整）
              ctx.textBaseline = "middle";
              ctx.fillStyle = "#000";
              ctx.fillText(achievedGoals, x, y - 10);
  
              // '/100'（小さく表示）
              ctx.font = calculateFontSize(chart.innerRadius, 2.5); // より小さなフォントサイズ（例: 2.5で調整）
              ctx.fillText('/' + totalGoals, x, y + 10);
  
              // 状態を保存（必要に応じて）
              ctx.save();
            }
          }]
        });
      } catch (error) {
        console.error('Failed to initialize chart:', error);
      }
    });
  </script>


</html>
