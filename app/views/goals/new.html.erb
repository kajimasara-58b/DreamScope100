<!DOCTYPE html>
<html>
<head>
  <!-- Turboのキャッシュを無効化 -->
  <meta name="turbo-cache-control" content="no-cache">
  <!-- Font AwesomeのCDNを読み込む -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

  <style>
    .button {
      transition: background-color 0.3s, color 0.3s; /* スムーズなトランジション */
    }

    .button:hover {
      background-color: #f0f0f0; /* ホバー時の背景色 */
      color: #333; /* ホバー時の文字色 */
    }

    .button:active {
      background-color: #e0e0e0; /* クリック時の背景色 */
      color: #111; /* クリック時の文字色 */
    }

    .calendar-icon {
      color: #FFC276; /* 通常時の色 */
      transition: color 0.3s; /* スムーズなトランジション */
    }

    .calendar-icon:hover {
      color: #FFA230; /* ホバー時の色 */
    }

    .form-uniform-height {
      height: 42px;
      line-height: 42px;
    }
    .text-right-force {
      text-align: right !important;
    }
    .checkbox-group {
      display: flex;
      align-items: center;
      margin-right: 24px; /* ONと「何日前」の間隔を広げる */
      margin-left: 8px;
    }
    .checkbox-label {
      margin-left: 10px;
      margin-bottom: 0;
    }
    .days-input {
      width: 70px; /* 何日前の入力幅 */
      border-radius: 4px;
      text-align: right;
    }
    .text_nitimae {
      width: 55px;
    }
    .form-section {
      width: 50%; /* 半分ずつ */
    }
  </style>
</head>

<%= render "shared/header" %>

<%= render 'devise/shared/error_messages', resource: @goal %>

<body class="bg-[#FFF5E8] flex flex-col h-screen overflow-auto" data-page="goal-new">
  <div class="flex-grow p-4 flex-col md:flex-row" style="display: flex; flex-direction: column;">  
    <div class="actions mb-7 flex mr-5">
      <% breadcrumb :goal_new %>
      <%= breadcrumbs separator: " › " %>
    </div>
    <main class="flex-grow p-4 flex flex-col items-center justify-center">
      <%= form_with model: @goal, local: true, html: { class: "w-full max-w-md" } do |form| %>
        <div class="mb-4">
          <%= form.label :title, "目標" %>
          <%= form.text_area :title, placeholder: "目標を入力してください", required: true, class: "rounded p-2 w-full", id: "goal-title-input-new" %>
          <div class="text-sm text-gray-500 mt-1">
            <span id="title-char-count-new">0</span>/40
          </div>
        </div>

        <div>
          <%= form.label :due_date, "達成予定日" %>
        </div>
        <div class="mb-4 flex items-center space-x-2">
          <%= form.date_field :due_date, class: "rounded p-2 w-full mr-3 form-uniform-height", id: "goal-due-date-input-new" %>
          <button type="button" id="calendar-button" class="flex items-center cursor-pointer button" title="Googleカレンダーに追加">
            <i class="fas fa-calendar-plus text-3xl mr-2 calendar-icon"></i>
          </button>
        </div>

        <div class="mb-4 flex gap-x-8">
          <div class="w-1/2 mr-5 form-section">
            <%= form.label :status, "達成状況" %>
            <%= form.select :status, Goal.statuses.keys.map { |status| [status.humanize, status] }, { prompt: '選択してください' }, { class: "rounded p-2 w-full form-uniform-height" } %>
          </div>
        
          <!-- 通知設定 -->
          <div class="w-1/2 form-section">
            <%= form.label :notify_enabled, "通知設定" %>
            <div class="flex items-center rounded bg-white p-2 form-uniform-height">
              
              <!-- ONチェックボックス -->
              <div class="checkbox-group">
                <%= form.check_box :notify_enabled, {}, true, false %>
                <%= form.label :notify_enabled, "ON", class: "checkbox-label" %>
              </div>
          
              <!-- 通知何日前フォーム + 日前 -->
              <div class="flex items-center gap-x-1">
                <%= form.number_field :notify_days_before, min: 1, placeholder: "", class: "days-input" %>
              </div>
              <div class="text_nitimae">
                <span>日前</span>
              </div>
            </div>
          </div>          
        </div>

        <div class="mb-9">
          <%= form.label :category, "カテゴリー" %>
          <%= form.select :category, Goal.categories.keys.map { |category| [category.humanize, category] }, { prompt: '選択してください' }, { class: "rounded p-2 w-full form-uniform-height" } %>
        </div>

        <div class="flex flex-col justify-center items-center md:items-start mb-5">
          <div class="flex mb-5 justify-between w-full">
            <div class="actions mb-5 flex mr-5">
              <%= link_to "キャンセル", goals_path, class: "bg-gray-300 text-black flex items-center px-4 py-2 rounded shadow button" %>
            </div>
            <div class="actions mb-5 flex space-x-2">
              <%= form.submit "作成", class: "bg-white text-black flex items-center px-4 py-2 rounded shadow button cursor-pointer" %>
            </div>
          </div>  
        </div>
      <% end %>  
    </main>
  </div>

  <!-- 文字数カウント用のスクリプト -->
  <script>
    const initializeCharCountNew = () => {
      if (document.body.dataset.page !== "goal-new") return;
      const titleInput = document.getElementById("goal-title-input-new");
      const charCountDisplay = document.getElementById("title-char-count-new");
      if (!titleInput || !charCountDisplay) {
        console.log("文字数カウント要素が見つかりません（新規作成画面）");
        return;
      }
      const updateCharCount = () => {
        const charCount = titleInput.value.length;
        charCountDisplay.textContent = charCount;
        if (charCount > 40) {
          charCountDisplay.style.color = "red";
        } else {
          charCountDisplay.style.color = "gray";
        }
      };
      updateCharCount();
      titleInput.addEventListener("input", updateCharCount);
    };

    function generateGoogleCalendarLink(title, date, description = "DreamScope100からの目標") {
      const parsedDate = new Date(date);
      if (isNaN(parsedDate)) {
        throw new Error("無効な日付です。正しい日付を入力してください。");
      }
      const formattedDate = parsedDate.toISOString().replace(/[-:]/g, "").split(".")[0].slice(0, 8);
      const encodedTitle = encodeURIComponent(title);
      const encodedDescription = encodeURIComponent(description);
      return `https://www.google.com/calendar/render?action=TEMPLATE&text=${encodedTitle}&dates=${formattedDate}/${formattedDate}&details=${encodedDescription}`;
    }

    function addToGoogleCalendar() {
      const titleInput = document.getElementById("goal-title-input-new");
      const dateInput = document.getElementById("goal-due-date-input-new");
      if (!titleInput || !dateInput) {
        console.error("入力要素が見つかりません（新規作成画面）。", { titleInput, dateInput });
        alert("フォームがまだ読み込まれていません。ページをリロードしてください。");
        return;
      }
      const originalTitle = titleInput.value.trim();
      const title = `達成予定日：${originalTitle}`;
      const date = dateInput.value;
      if (!originalTitle) {
        alert("目標を入力してください！");
        return;
      }
      if (!date) {
        alert("達成予定日を選択してください！");
        return;
      }
      try {
        const calendarUrl = generateGoogleCalendarLink(title, date);
        window.open(calendarUrl, "_blank");
      } catch (error) {
        alert(error.message);
      }
    }

    const initializeCalendarButton = () => {
      const calendarButton = document.querySelector("#calendar-button");
      const titleInput = document.getElementById("goal-title-input-new");
      const dateInput = document.getElementById("goal-due-date-input-new");
      if (calendarButton && titleInput && dateInput) {
        console.log("カレンダーボタンにリスナーを設定しました（新規作成画面）");
        calendarButton.removeEventListener("click", addToGoogleCalendar);
        calendarButton.addEventListener("click", addToGoogleCalendar);
      } else {
        console.log("カレンダーボタンまたは入力要素が見つかりません（新規作成画面）", {
          calendarButton,
          titleInput,
          dateInput,
        });
      }
    };

    // Turboイベントを削除し、DOMContentLoadedのみで初期化
    document.addEventListener("DOMContentLoaded", () => {
      console.log("DOMContentLoaded イベント発火（新規作成画面）");
      initializeCharCountNew();
      initializeCalendarButton();
    });
  </script>
</body>

<%= render "shared/footer" %>
</html>